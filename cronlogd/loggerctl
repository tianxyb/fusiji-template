#!/bin/bash

LOGGER_ETC_HOME=${LOGGER_ETC_HOME:-$HOMEBREW_PREFIX/etc/loggerd.d}
LOGGER_RUNNING_HOME=${LOGGER_RUNNING_HOME:-$HOMEBREW_PREFIX/var/run/loggerd}
LOGGER_PIPE_HOME=${LOGGER_PIPE_HOME:-$LOGGER_RUNNING_HOME/pipe}
LOGGER_FILE_STORE=${LOGGER_FILE_STORE:-$LOGGER_RUNNING_HOME/store}
LOGGER_CONFIG_FILE=$LOGGER_ETC_HOME/logger.conf

function usage()
{
	cat <<!
Usage: $(basename $0) create logger_name [-m | -d] -H logfile_path
	| $(basename $0) start logger_name
	| $(basename $0) stop logger_name
	| $(basename $0) delete logger_name
	| $(basename $0) list

Options: 
	-m: roll logfile every month
	-d: roll logfile every day
!
}

function check_logger_exist()
{
	local logger=$1
	local cnt=$(grep "^$logger:" $LOGGER_CONFIG_FILE | wc -l)
	[ "$cnt" -gt 0 ] && return 0 || return 1
}

function run_logger_daemon
{
	local logger=$1
	local outpath=$2
	local period=$3

	local logfile_prefix="$logger"
	[ "${logfile_prefix%.log}" == "${logger}" ] && logfile_prefix="$logger.log"

	local logfile_pattern="${outpath%%/}/$logfile_prefix.%m"
	if [ "$period" == day ]; then
		logfile_pattern="${outpath%%/}/$logfile_prefix.%d"
	fi

	echo "pipe:$LOGGER_PIPE_HOME/$logger.pipe -l "${outpath%%/}/$logfile_prefix" $logfile_pattern" >$LOGGER_RUNNING_HOME/$logger.run
}

function save_logger
{
	local logger=$1
	local outpath=$2
	local period=$3

	echo "$logger:$outpath:$period" >>$LOGGER_CONFIG_FILE
}

function delete_logger
{
	local logger=$1


	[ -f "$LOGGER_RUNNING_HOME/$logger.run" ] && {
		echo "try stop logger first"
		stop_logger "$logger"
	}

	local conf=$(grep "^$logger:" $LOGGER_CONFIG_FILE)
	if [ "$conf" ]; then
		local pipe=${conf#*:}
		pipe=${pipe%:*}
		[ -p "$pipe" ] && rm -f "$pipe"

		gsed -i -e "/^$logger:/d" $LOGGER_CONFIG_FILE
		echo "Delete Logger $logger success!"
	else
		echo "Delete Logger fail, cannot found [$logger]"
	fi

}

function create_logger
{
	local logger=$1
	local outpath=$2
	local period=$3

	if check_logger_exist "$logger"; then
		echo "Create logger fail, $logger exists! "
		return
	fi

	save_logger "$logger" "$outpath" "$period"
	echo "Create Logger $logger success!"
	echo "try start logger $logger..."
	run_logger_daemon "$logger" "$outpath" "$period"
	echo "Start Logger $logger success!"
}

function start_logger
{
	local logger=$1
	if ! check_logger_exist "$logger"; then
		echo "Start logger fail, $logger not exist!"
		return
	fi

	[ -f "$LOGGER_RUNNING_HOME/$logger.run" ] && {
		echo "Logger $logger is already running"
		return
	}

	local logger_config=$(grep "^$logger:" $LOGGER_CONFIG_FILE | head -n 1)
	local outpath=${logger_config#*:}
	outpath=${outpath%:*}
	local period=${logger_config##*:}

	run_logger_daemon "$logger" "$outpath" "$period"
	echo "Start Logger $logger success!"
}

function stop_logger
{
	local logger=$1

	[ -f "$LOGGER_RUNNING_HOME/$logger.run" ] || {
		echo "Stop logger fail, $logger is not running"
		return
	}

	rm -f "$LOGGER_RUNNING_HOME/$logger.run"
	echo "Stop Logger $logger success!"
}

function list_logger
{
	gawk -F: 'NR == FNR { out[$1]=$2; period[$1]=$3; } NR > FNR { pipe[$1]=$3; pid[$1]=$2; } END {printf "%-30s %-8s %-60s %-60s %-8s %-s\n", "LOGGER", "ROLLING", "INPUT_PIPE", "OUTPUT_PATH", "PID", "STATUS";   for (logger in out) { status="";  if(logger in pid) {"kill -0 "pid[logger]" 2>/dev/null && echo running || echo dead" | getline status}; printf "%-30s %-8s %-60s %-60s %-8s %-s\n", logger, period[logger], pipe[logger], out[logger], pid[logger], status; }}' "$LOGGER_CONFIG_FILE" "$LOGGER_RUNNING_HOME"/.running
}

cmd=$1
shift
try_logger=$1
shift
arg_period=month
arg_output="$LOGGER_FILE_STORE/${try_logger%%.log}"

case "$cmd" in
create | start | stop | delete)
	if ! [ "$try_logger" ]; then
		usage
		exit 1
	fi
	;;
esac

if [ "$cmd" == create ]; then
	while [ "${1:0:1}" == - ]; do
		case "$1" in
		-m)
			arg_period=month
			;;
		-d)
			arg_period=day
			;;
		-H)
			shift
			arg_output=$1
			;;
		*)
			usage
			;;
		esac
		shift
	done
fi

mkdir -p "$LOGGER_ETC_HOME" "$LOGGER_PIPE_HOME" "$LOGGER_FILE_STORE"
[ -f "$LOGGER_CONFIG_FILE" ] || touch "$LOGGER_CONFIG_FILE"
case "$cmd" in
create)
	create_logger "$try_logger" "$arg_output" "$arg_period"
	;;
start)
	start_logger "$try_logger"
	;;
stop)
	stop_logger "$try_logger"
	;;
delete)
	delete_logger "$try_logger"
	;;
list|status) 
	list_logger
	;;
*)
	usage
	;;
esac

#!/bin/bash

export PS4='+{$$:${FUNCNAME[0]}} '

SCRIPT_DIR=$(
	cd $(dirname ${BASH_SOURCE[0]})
	pwd
)
SCRIPT="$SCRIPT_DIR/$(basename ${BASH_SOURCE[0]})"

#LOGGERD_RUNNING_DIR="$1"
DEFAULT_LOGGER_RUNNING_HOME=${LOGGER_RUNNING_HOME:-$HOMEBREW_PREFIX/var/run/rollinglogd}
[ "$LOGGERD_RUNNING_DIR" ] || LOGGERD_RUNNING_DIR=$DEFAULT_LOGGER_RUNNING_HOME

RUNNING_STATUS_STORE=$LOGGERD_RUNNING_DIR/.running
LOGGER_DAEMON_LOGFILE=${LOGGER_DAEMON_LOGFILE:-$HOMEBREW_PREFIX/var/log/rollinglogd.log}
LOGGER_DAEMON_PID_FILE="$LOGGERD_RUNNING_DIR/.daemon.pid"

MAX_INTERVAL_DAEMON_RESTART=3600

function msg()
{
	echo "$(date "+%Y-%m-%d %H:%M:%S") $*" | tee -a "$LOGGER_DAEMON_LOGFILE"
}

which cronolog >/dev/null 2>&1 || {
	echo "can not found cronolog, please install first!"
	exit 1
}

function check_daemon
{
	local pid=
	[ -r "$LOGGER_DAEMON_PID_FILE" ] && pid=$(cat "$LOGGER_DAEMON_PID_FILE")
	[ "$pid" ] && kill -0 "$pid" 2>/dev/null && {
		local lives=$(ps -ef | grep "[^0-9]$pid[^0-9].*rollinglogd\>" | grep -v grep | wc -l)
		[ "$lives" -gt 0 ] && return 0
	}
	return 1
}

function check_daemon_withpid
{
	local expect_pid=$1
	local pid=0
	[ -r "$LOGGER_DAEMON_PID_FILE" ] && pid=$(cat "$LOGGER_DAEMON_PID_FILE")
	[ "$pid" == "$expect_pid" ] && kill -0 "$expect_pid" 2>/dev/null && return 0
	return 1
}

function update_status
{
	local logger=${1%.run}
	local pid=$2
	local pipe=$3
	local pattern=$4

	gsed -i -e "/^$logger:/d" "$RUNNING_STATUS_STORE"
	echo "$logger:$pid:$pipe:$pattern" >>"$RUNNING_STATUS_STORE"
}

function delete_status
{
	local logger=${1%.run}
	gsed -i -e "/^$logger:/d" "$RUNNING_STATUS_STORE"
}

function read_status
{
	local logger=${1%.run}
	local record=$(grep "^$logger:" "$RUNNING_STATUS_STORE")

	local pid=${record#*:}
	pid=${pid%%:*}

	local pipe=${record%:*}
	pipe=${pipe##*:}

	local pattern=${record##*:}

	eval "$2=$pid"
	eval "$3=\"$pipe\""
	eval "$4=\"$pattern\""
}

function start_logger()
{
	msg "[daemon] try start logger for config: $1"
	[ -f "$1" ] || {
		msg "[daemon] config file: [$1] not exist!"
		return 1
	}

	local logger=$1

	if [ "$(set -o | awk '$1 == "xtrace" { print $2 }')" == on ]; then
		bash -x "$SCRIPT" -task "$logger" $$ &
	else
		nohup bash "$SCRIPT" -task "$logger" $$ >/dev/null &
	fi
	#pid=$!

}

function run_logger
{
	local logger=$1
	local dpid=$2
	local conf=$(grep '^pipe:' "$1" | head -n 1)
	local pipe=${conf%% *}
	pipe=${pipe#pipe:}
	local pattern=${conf#* }

	[ -z "$pipe" -o -z "$pattern" ] && {
		msg "[$logger] config file [$1] format error!"
		cat "$1"
		return 1
	}

	if ! [ -p "$pipe" ]; then
		[ -f "$pipe" ] && {
			msg "[$logger] file $pipe is not fifo"
			return 2
		}
		mkfifo "$pipe"
	fi
	
	local next_sleep=1
	while [ -r $logger ]; do
		local begin_time=$(date +%s)
		cronolog $pattern <"$pipe" &
		local pid=$!
		update_status "$logger" "$pid" "$pipe" "$pattern"
		msg "[$logger] started logger process [$pid]"
		wait $pid

		check_daemon_withpid "$dpid" || {
			msg "[$logger] Logger Daemon has exited, quit logger too"
			break
		}
		if [ "$begin_time" == "$(date +%s)" ]; then
			[ -r $Logger ] && msg "[$logger] Logger [$pid] process quit, restart after $next_sleep second"
			sleep $next_sleep
			next_sleep=$(( next_sleep+next_sleep > $MAX_INTERVAL_DAEMON_RESTART ? $MAX_INTERVAL_DAEMON_RESTART: next_sleep+next_sleep))
		else
			next_sleep=1
			[ -r $Logger ] && msg "[$logger] Logger [$pid] process quit, restart immediately"
		fi
	done
	msg "[$logger] Logger task stop."
}

function stop_logger()
{
	msg "[daemon] try stop logger for config: $1"

	[ "$1" ] || return

	read_status "$1" last_pid last_pipe last_pattern
	[ "$last_pid" ] || {
		msg "[daemon] can not found [$1]'s logger"
		return
	}

	kill $last_pid
	delete_status "$1"
}

function is_content_updated()
{
	local conf=$(grep '^pipe:' "$1" | head -n 1)
	local pipe=${conf%% *}
	pipe=${pipe#pipe:}
	local pattern=${conf#* }

	read_status "$1" last_pid last_pipe last_pattern

	if [ "$last_pipe" != "$pipe" -o "$last_pattern" != "$pattern" ]; then
		return 0
	else
		return 1
	fi
}

function start()
{
	local pwd=$PWD
	cd "$LOGGERD_RUNNING_DIR"
	for f in $(ls *.run 2>/dev/null | grep -v ' '); do
		msg "[daemon] found log config $f, start daemon"
		start_logger "$f"
	done
	cd "$pwd"
}

monitor()
{
	msg "[daemon] begin monitor logger config"
	local pwd=$PWD
	#local dir=$(basename $LOGGERD_RUNNING_DIR)
	cd "$LOGGERD_RUNNING_DIR"
	fswatch -x -e ".*" -i "^[^ ]*\\.run$" --event Removed --event Updated --event Created "$LOGGERD_RUNNING_DIR" | while read change; do
		msg "[daemon] watched change: $change"
		local config=$(basename ${change%% *})
		local events=${change#* }

		if [ "$events" != "${events//Removed/}" ]; then
			stop_logger $config
		elif [ "$events" != "${events//Created/}" ]; then
			start_logger $config
		elif [ "$events" != "${events//Updated/}" ]; then
			if is_content_updated "$config"; then
				stop_logger $config
				start_logger $config
			fi
		fi
	done
	cd "$pwd"
}

[ -d "$LOGGERD_RUNNING_DIR" ] || {
	#	msg "Running Home [$LOGGERD_RUNNING_DIR] not exist"
	#	exit 2
	mkdir -p "$LOGGERD_RUNNING_DIR"
}

if [ "$1" == "-task" ]; then
	shift
	run_logger "$1" "$2"
else
	check_daemon && { msg "[daemon] Logger daemon is already running!"; exit 0; }
	start
	echo $$ >"$LOGGER_DAEMON_PID_FILE"
	monitor
	rm -f "$LOGGER_DAEMON_PID_FILE"
fi
